{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleInputOnChange","event","currentTarget","value","setState","handleSubmit","e","preventDefault","props","onSubmit","reset","this","className","s","formGroup","type","pattern","title","required","onChange","button","Component","ContactItem","onClick","ContactList","contacts","onDeleteContact","map","id","listItem","Filter","App","initialContacts","filter","contactId","uuidv4","formSubmitHandler","newContact","contact","toLowerCase","includes","toast","warn","addContact","success","prevState","seachContactByName","contactName","getVisibleContacts","normalizedFilter","visibleContacts","position","autoClose","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcfddb4c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__JQUHj\",\"listItem\":\"ContactList_listItem__x5Oi5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroup\":\"ContactForm_formGroup__oavkX\",\"form-group\":\"ContactForm_form-group__1JxOs\",\"button\":\"ContactForm_button__34o-B\"};","import React, { Component } from 'react';\r\nimport s from './ContactForm.module.css';\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInputOnChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onSubmit(this.state);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div className={s.formGroup}>\r\n          <label>\r\n            Name{' '}\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handleInputOnChange}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Number{' '}\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleInputOnChange}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <button type=\"submit\" className={s.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactItem = ({ name, number, onClick }) => {\r\n  return (\r\n    <>\r\n      {name}: {number}\r\n      <button className={s.button} type=\"button\" onClick={onClick}>\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport ContactItem from './ContactItem';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ol>\r\n    {contacts.map(({ name, number, id }) => (\r\n      <li key={id} className={s.listItem}>\r\n        <ContactItem\r\n          name={name}\r\n          number={number}\r\n          onClick={() => onDeleteContact(id)}\r\n        />\r\n      </li>\r\n    ))}\r\n  </ol>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.shape.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label>\r\n      {' '}\r\n      Find contacts by name\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import React, { Component } from 'react';\nimport './App.css';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport initialContacts from './data/contacts.json';\nimport { v4 as uuidv4 } from 'uuid';\nimport Filter from './components/Filter';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: '',\n  };\n\n  contactId = uuidv4();\n\n  formSubmitHandler = newContact => {\n    const similarName = this.state.contacts\n      .map(contact => contact.name.toLowerCase())\n      .includes(newContact.name.toLowerCase());\n\n    const notifyWarn = () =>\n      toast.warn(`${newContact.name} is already in phonebook !`);\n\n    const notifySuccess = () =>\n      toast.success(`${newContact.name} is added in phonebook !`);\n\n    if (similarName) {\n      notifyWarn();\n    } else {\n      const addContact = {\n        ...newContact,\n        id: this.contactId,\n      };\n      notifySuccess();\n\n      this.setState(({ contacts }) => ({\n        contacts: [...contacts, addContact],\n      }));\n    }\n  };\n\n  onDeleteContact = contactId => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n  seachContactByName = contactName => {\n    this.setState({ filter: contactName.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div className=\"Container\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n\n        <Filter value={filter} onChange={this.seachContactByName} />\n\n        <h2>Contacts</h2>\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.onDeleteContact}\n        />\n        <ToastContainer\n          position=\"top-center\"\n          autoClose={2000}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss={false}\n          draggable={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}